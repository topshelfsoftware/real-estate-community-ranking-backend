AWSTemplateFormatVersion : '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Service for ranking 55+ real estate communities

Parameters:
  Env:
    Type: String
    Description: Deployment environment
    AllowedValues:
      - devl
      - prod
  Vpc:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /vpc/id
  PrvSubnets:
    Type: AWS::SSM::Parameter::Value<CommaDelimitedList>
    Default: /vpc/private/subnet/ids
  PubSubnets:
    Type: AWS::SSM::Parameter::Value<CommaDelimitedList>
    Default: /vpc/public/subnet/ids
  TopshelfAwsUtilLayer:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /lambda/layer/arn/topshelfsoftware-aws-util
  JsonSchemaLayer:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /lambda/layer/arn/jsonschema
  PandasLayer:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /lambda/layer/arn/pandas
  CommunityDataS3Bucket:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /s3/real-estate/community/bucket/name
  CommunityDataS3Object:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /s3/real-estate/community/object/name

Globals:
  Function:
    MemorySize: 128
    Timeout: 30
    Runtime: python3.9
    Layers:
      - !Ref TopshelfAwsUtilLayer
  Api:
    Cors:
      AllowHeaders: "'*'"
      AllowMethods: "'POST'"
      AllowOrigin: "'*'"
    EndpointConfiguration:
      Type: REGIONAL
    Auth:
      AddDefaultAuthorizerToCorsPreflight: false
      ApiKeyRequired: true

Resources:
  # --------------- SG / IAM --------------- #
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP(s) access to all routable
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: HTTPS
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/8
        - Description: HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/8
  
  ApiRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: APIInvokeBackendLambdaFunctions
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt RunRealEstateRanking.Arn
                  - !GetAtt RunUpdateCommunityData.Arn
  
  WorkflowRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - states.amazonaws.com
      Policies:
        - PolicyName: RealEstateCommunityRankingInvokeLambdaPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !GetAtt RankCommunities.Arn
                  - !GetAtt UpdateCommunityData.Arn
                  - !GetAtt ValidateCommunityData.Arn
                  - !GetAtt ValidateRankInputs.Arn
  
  EventBridgeInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt ValidateRankInputs.Arn
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WeeklyLambdaTrigger.Arn
  
  # --------------- API --------------- #
  RestApi:
    Type: AWS::Serverless::Api
    Properties:
      Description: API for the real estate community ranking backend
      Name: !Join ['-', [!Ref AWS::StackName, api]]
      StageName: !Ref Env
      BinaryMediaTypes:
        - application/vnd.openxmlformats-officedocument.spreadsheetml.sheet  # xlsx files
      EndpointConfiguration:
        Type: REGIONAL

  RankApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - RankApiUsagePlan
    Properties:
      Description: API Key for the /rank endpoint
      Name: !Join ['-', [rank, api, key]]
      Enabled: true
      GenerateDistinctId: false
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: !Ref Env

  RankApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - RestApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: !Ref Env
      Description: Usage plan for the /rank endpoint
      UsagePlanName: !Join ['-', [rank, api, usage, plan]]
      Quota:
        Limit: 1000
        Period: WEEK
  
  RankApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - RankApiKey
    Properties:
      KeyId: !Ref RankApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref RankApiUsagePlan

  UpdateDataApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - UpdateDataApiUsagePlan
    Properties:
      Description: API Key for the /update_data endpoint
      Name: !Join ['-', [update-data, api, key]]
      Enabled: true
      GenerateDistinctId: false
      StageKeys:
        - RestApiId: !Ref RestApi
          StageName: !Ref Env

  UpdateDataApiUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - RestApiStage
    Properties:
      ApiStages:
        - ApiId: !Ref RestApi
          Stage: !Ref Env
      Description: Usage plan for the /update_data endpoint
      UsagePlanName: !Join ['-', [update-data, api, usage, plan]]
      Quota:
        Limit: 100
        Period: MONTH
  
  UpdateDataApiUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    DependsOn:
      - UpdateDataApiKey
    Properties:
      KeyId: !Ref UpdateDataApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UpdateDataApiUsagePlan

  # --------------- LAMBDA --------------- #
  RunRealEstateRanking:
    Type: AWS::Serverless::Function
    Properties:
      Description: Launches the real estate community ranking workflow
      CodeUri: lambdas/run_real_estate_ranking
      Handler: src.app.lambda_handler
      Timeout: 25
      # No VpcConfig => this Lambda deployed outsided VPC
      Policies:
        - VPCAccessPolicy: {}
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt RealEstateRankingWorkflow.Name
        - AWSStepFunctionsReadOnlyAccess
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref RealEstateRankingWorkflow
      Events:
        Execute:
          Type: Api
          Properties:
            Path: /rank
            Method: post
            RestApiId: !Ref RestApi

  RunUpdateCommunityData:
    Type: AWS::Serverless::Function
    Properties:
      Description: Launches the workflow to update the community data
      CodeUri: lambdas/run_update_community_data
      Handler: src.app.lambda_handler
      Timeout: 25
      # No VpcConfig => this Lambda deployed outsided VPC
      Policies:
        - VPCAccessPolicy: {}
        - StepFunctionsExecutionPolicy:
            StateMachineName: !GetAtt UpdateCommunityDataWorkflow.Name
        - AWSStepFunctionsReadOnlyAccess
      Environment:
        Variables:
          STATE_MACHINE_ARN: !Ref UpdateCommunityDataWorkflow
      Events:
        Execute:
          Type: Api
          Properties:
            Path: /update_data
            Method: post
            RestApiId: !Ref RestApi

  RankCommunities:
    Type: AWS::Serverless::Function
    Properties:
      Description: Rank top 55+ communities based on homebuyer needs/wants
      CodeUri: lambdas/rank_communities
      Handler: src.app.lambda_handler
      MemorySize: 1024
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds: !Ref PrvSubnets
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
          - Action:
            - s3:GetObject
            Effect: Allow
            Resource:
            - !Sub "arn:aws:s3:::${CommunityDataS3Bucket}/*"
      Layers:
        - !Ref PandasLayer
      Environment:
        Variables:
          COMMUNITY_DATA_BUCKET_NAME: !Ref CommunityDataS3Bucket
          COMMUNITY_DATA_OBJECT_NAME: !Ref CommunityDataS3Object
  
  UpdateCommunityData:
    Type: AWS::Serverless::Function
    Properties:
      Description: Update the 55+ community dataset from excel file (provided as bytes string)
      CodeUri: lambdas/update_community_data
      Handler: src.app.lambda_handler
      MemorySize: 128
      Timeout: 10
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds: !Ref PrvSubnets
      Policies:
        - VPCAccessPolicy: {}
        - Statement:
          - Action:
            - s3:PutObject
            Effect: Allow
            Resource:
            - !Sub "arn:aws:s3:::${CommunityDataS3Bucket}/*"
      Environment:
        Variables:
          COMMUNITY_DATA_BUCKET_NAME: !Ref CommunityDataS3Bucket
          COMMUNITY_DATA_OBJECT_NAME: !Ref CommunityDataS3Object
  
  ValidateCommunityData:
    Type: AWS::Serverless::Function
    Properties:
      Description: Validate dataset of 55+ communities
      CodeUri: lambdas/validate_community_data
      Handler: src.app.lambda_handler
      MemorySize: 256
      Timeout: 15
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds: !Ref PrvSubnets
      Policies:
        - VPCAccessPolicy: {}
      Layers:
        - !Ref PandasLayer
  
  ValidateRankInputs:
    Type: AWS::Serverless::Function
    Properties:
      Description: Validate inputs to the 55+ community ranking service
      CodeUri: lambdas/validate_rank_inputs
      Handler: src.app.lambda_handler
      Timeout: 5
      VpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroup
        SubnetIds: !Ref PrvSubnets
      Policies:
        - VPCAccessPolicy: {}
      Layers:
        - !Ref JsonSchemaLayer
  
  # --------------- STEP FUNCTIONS --------------- #
  RealEstateRankingWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Role: !GetAtt WorkflowRole.Arn
      DefinitionUri: sfn_rank.yaml
      DefinitionSubstitutions:
        rank_communities_arn: !GetAtt RankCommunities.Arn
        validate_rank_inputs_arn: !GetAtt ValidateRankInputs.Arn

  UpdateCommunityDataWorkflow:
    Type: AWS::Serverless::StateMachine
    Properties:
      Role: !GetAtt WorkflowRole.Arn
      DefinitionUri: sfn_update_data.yaml
      DefinitionSubstitutions:
        update_community_data_arn: !GetAtt UpdateCommunityData.Arn
        validate_update_community_data_arn: !GetAtt ValidateCommunityData.Arn

  # --------------- EVENTS --------------- #
  WeeklyLambdaTrigger:
    Type: AWS::Events::Rule
    Properties:
      Description: Scheduled rule to trigger Lambda once a week
      ScheduleExpression: 'cron(0 0 ? * SUN *)'  # Trigger every Sunday at midnight UTC
      State: ENABLED
      Targets:
        - Arn: !GetAtt ValidateRankInputs.Arn
          Id: WeeklyValidateRankInputsLambdaTrigger
          Input: "{\"triggered_by\":\"WeeklyLambdaTrigger\",\"needs\":{\"price_range_lower\":\"200k\",\"price_range_upper\":\"400k\",\"age_of_home\":\"Does not matter\",\"location\":[\"West Valley\",\"East Valley\",\"Central\"],\"size_of_community\":[\"Small\",\"Medium\",\"Large\"]},\"wants\":{\"gated\":1,\"quality_golf_courses\":1,\"mult_golf_courses\":1,\"mountain_views\":1,\"many_social_clubs\":1,\"softball_field\":1,\"isolated_from_city\":1,\"fishing\":1,\"woodwork_shop\":1,\"indoor_pool\":1,\"quality_trails\":1,\"dog_park\":1,\"competitive_pickleball\":1},\"email_address\":\"hi@example.com\",\"email_homebuyer\":false}"

  # --------------- SSM --------------- #
  RankApiKeyId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /api/key/id/real-estate/ranking/rank
      Description: API Key for the /rank endpoint
      Type: String
      Value: !Ref RankApiKey

  UpdateDataApiKeyId:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /api/key/id/real-estate/ranking/update-data
      Description: API Key for the /rank endpoint
      Type: String
      Value: !Ref UpdateDataApiKey

  RankWorkflowArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /sfn/real-estate/ranking/rank/arn
      Description: ARN for real estate community ranking stepfunction
      Type: String
      Value: !Ref RealEstateRankingWorkflow

  UpdateDataWorkflowArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /sfn/real-estate/ranking/update-data/arn
      Description: ARN for updating community data stepfunction
      Type: String
      Value: !Ref UpdateCommunityDataWorkflow

# --------------- OUTPUTS --------------- #
Outputs:
  RankEndpoint:
    Description: API Gateway endpoint URL for launching + polling the ranking workflow
    Value:
      !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}/rank
  UpdateDataEndpoint:
    Description: API Gateway endpoint URL for launching + polling the workflow for updating community data
    Value:
      !Sub https://${RestApi}.execute-api.${AWS::Region}.amazonaws.com/${Env}/update_data
